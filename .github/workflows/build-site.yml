name: Build and Deploy Site

on:
  push:
    branches: [ main, mmm/sitegenerator ]
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-site:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install

    - name: Create cache key from data files
      id: cache-key
      run: |
        # Use the same cache key logic as the download workflow
        find data -name "*.json" -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1 > data-hash.txt
        echo "data-hash=$(cat data-hash.txt)" >> $GITHUB_OUTPUT
        echo "date=$(date +'%Y-%m')" >> $GITHUB_OUTPUT

    - name: Restore cached images
      uses: actions/cache/restore@v4
      id: image-cache
      with:
        path: images/
        key: mtg-images-${{ steps.cache-key.outputs.data-hash }}
        restore-keys: |
          mtg-images-${{ steps.cache-key.outputs.date }}
          mtg-images-

    - name: Check for cached images
      run: |
        if [ -d "images" ]; then
          echo "✅ Found cached images: $(find images -type f | wc -l) files"
          echo "📁 Cache size: $(du -sh images/ | cut -f1)"
        else
          echo "❌ No cached images found"
          echo "🔄 You may need to run the 'Download MTG Images' workflow first"
          exit 1
        fi

    - name: Install dependencies
      run: uv sync

    - name: Generate site
      run: uv run pointed-discussion

    - name: Upload site to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: output/

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-site
    # Only deploy on main branch pushes, not PRs
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
